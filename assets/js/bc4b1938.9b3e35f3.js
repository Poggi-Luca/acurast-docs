"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[542],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>h});var o=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,o,a=function(e,t){if(null==e)return{};var r,o,a={},n=Object.keys(e);for(o=0;o<n.length;o++)r=n[o],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(o=0;o<n.length;o++)r=n[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=o.createContext({}),l=function(e){var t=o.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},u=function(e){var t=l(e.components);return o.createElement(p.Provider,{value:t},e.children)},i={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var r=e.components,a=e.mdxType,n=e.originalType,p=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=l(r),h=a,m=d["".concat(p,".").concat(h)]||d[h]||i[h]||n;return r?o.createElement(m,c(c({ref:t},u),{},{components:r})):o.createElement(m,c({ref:t},u))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var n=r.length,c=new Array(n);c[0]=d;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:a,c[1]=s;for(var l=2;l<n;l++)c[l]=r[l];return o.createElement.apply(null,c)}return o.createElement.apply(null,r)}d.displayName="MDXCreateElement"},7289:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>c,default:()=>i,frontMatter:()=>n,metadata:()=>s,toc:()=>l});var o=r(7462),a=(r(7294),r(3905));const n={title:"Node Setup",slug:"/acurast-protocol/node-setup"},c=void 0,s={unversionedId:"acurast-protocol/node-setup",id:"acurast-protocol/node-setup",title:"Node Setup",description:"Step by step guide on how to setup an Acurast node for the Rococo testnet.",source:"@site/docs/acurast-protocol/node-setup.mdx",sourceDirName:"acurast-protocol",slug:"/acurast-protocol/node-setup",permalink:"/acurast-protocol/node-setup",draft:!1,editUrl:"https://github.com/acurast/acurast-docs/docs/acurast-protocol/node-setup.mdx",tags:[],version:"current",frontMatter:{title:"Node Setup",slug:"/acurast-protocol/node-setup"},sidebar:"docs",previous:{title:"Mesh",permalink:"/acurast-protocol/interoperability/mesh"},next:{title:"Introduction",permalink:"/integrations/introduction"}},p={},l=[{value:"Get the source code and build",id:"get-the-source-code-and-build",level:2},{value:"Run as a Collator",id:"run-as-a-collator",level:2}],u={toc:l};function i(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,o.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Step by step guide on how to setup an Acurast node for the Rococo testnet."),(0,a.kt)("h2",{id:"get-the-source-code-and-build"},"Get the source code and build"),(0,a.kt)("p",null,"Clone the Acurast parachain source code from its Github repo:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"git clone https://github.com/Acurast/acurast-substrate.git\n")),(0,a.kt)("p",null,"Make sure to checkout the appropriate tag, ",(0,a.kt)("inlineCode",{parentName:"p"},"acurast-v0.1.1")," at the  time of writing."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"cd acurast-substrate\ngit checkout acurast-v0.1.1\n")),(0,a.kt)("p",null,"Before building, make sure the ",(0,a.kt)("a",{parentName:"p",href:"https://docs.substrate.io/install/rust-toolchain/"},"Rust toolchain is installed"),"."),(0,a.kt)("p",null,"Build the node:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"cargo build --release\n")),(0,a.kt)("p",null,"Then run the node:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"./target/release/acurast-node --rococo-runtime --bootnodes /ip4/138.201.85.115/tcp/40335/p2p/12D3KooWAYwTLAQu47uBmCvA1uYpJs7ND1mkoCJTdU1Z6VYqgTp1 --parachain-id 2239 --base-path /tmp/para/acurast --port 40335 --ws-port 8846 --rpc-port 8082 --unsafe-ws-external --rpc-methods=unsafe --rpc-external --rpc-cors=all -- --execution wasm --chain rococo.json --port 30345 --ws-port 9979\n")),(0,a.kt)("p",null,"Replace the ",(0,a.kt)("inlineCode",{parentName:"p"},"/tmp/para/acurast")," path to the location you want the chain data to be stored in. Also adapt the port numbers and the rpc/websocket options as necessary."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"rococo.json")," file in the command above needs to be the Rococo chain spec and can be downloaded ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/paritytech/polkadot/tree/master/node/service/chain-specs"},"here"),"."),(0,a.kt)("h2",{id:"run-as-a-collator"},"Run as a Collator"),(0,a.kt)("p",null,"To run as a collator, first create and identity. One easy way to do it is to use the ",(0,a.kt)("a",{parentName:"p",href:"https://docs.substrate.io/reference/command-line-tools/subkey/"},"subkey")," tool."),(0,a.kt)("p",null,"Then, when starting the node, add the ",(0,a.kt)("inlineCode",{parentName:"p"},"--collator")," flag to the command used to run the node, e.g.:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"./target/release/acurast-node --collator --rococo-runtime --bootnodes /ip4/138.201.85.115/tcp/40335/p2p/12D3KooWAYwTLAQu47uBmCvA1uYpJs7ND1mkoCJTdU1Z6VYqgTp1 --parachain-id 2239 --base-path /tmp/para/acurast --port 40335 --ws-port 8846 --rpc-port 8082 --unsafe-ws-external --rpc-methods=unsafe --rpc-external --rpc-cors=all -- --execution wasm --chain rococo.json --port 30345 --ws-port 9979\n")),(0,a.kt)("p",null,"Then, setup the identity of the collator by calling the ",(0,a.kt)("inlineCode",{parentName:"p"},"author_insertKey")," rpc as follow:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},'curl -vH \'Content-Type: application/json\' --data \'{ "jsonrpc":"2.0", "method":"author_insertKey", "params":["nmbs", "<SECRET_SEED>", "<PUBLIC_KEY>"],"id":1 }\' http://localhost:8082\n')),(0,a.kt)("p",null,"Where ",(0,a.kt)("inlineCode",{parentName:"p"},"<SECRET_SEED>")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"<PUBLIC_KEY>")," should be replaced by the values of the generated identity."))}i.isMDXComponent=!0}}]);