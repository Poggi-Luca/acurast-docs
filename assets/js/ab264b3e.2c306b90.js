"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[327],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>u});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),g=c(t),u=i,m=g["".concat(l,".").concat(u)]||g[u]||p[u]||a;return t?r.createElement(m,o(o({ref:n},d),{},{components:t})):r.createElement(m,o({ref:n},d))}));function u(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=g;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var c=2;c<a;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},7733:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=t(7462),i=(t(7294),t(3905));const a={title:"API Reference",slug:"/developers/api-reference"},o="Standard API",s={unversionedId:"developers/api-reference",id:"developers/api-reference",title:"API Reference",description:"HTTP",source:"@site/docs/developers/api-reference.mdx",sourceDirName:"developers",slug:"/developers/api-reference",permalink:"/developers/api-reference",draft:!1,editUrl:"https://github.com/acurast/acurast-docs/docs/developers/api-reference.mdx",tags:[],version:"current",frontMatter:{title:"API Reference",slug:"/developers/api-reference"},sidebar:"docs",previous:{title:"How To Get Started",permalink:"/developers/get-started"},next:{title:"Acurast Processors",permalink:"/acurast-processors"}},l={},c=[{value:"HTTP",id:"http",level:2},{value:"GET",id:"get",level:3},{value:"POST",id:"post",level:3},{value:"Utils",id:"utils",level:2},{value:"Generate random bytes",id:"generate-random-bytes",level:3},{value:"Chains",id:"chains",level:2},{value:"Application Information",id:"application-information",level:2},{value:"Version",id:"version",level:3}],d={toc:c};function p(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"standard-api"},"Standard API"),(0,i.kt)("h2",{id:"http"},"HTTP"),(0,i.kt)("p",null,"A set of methods to allow the script to send HTTP requests."),(0,i.kt)("h3",{id:"get"},"GET"),(0,i.kt)("p",null,"A method that sends an HTTP GET request to a specified resource."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"httpGET(\n    url: string; // The only supported protocol in the URL is `https://`\n    headers: Record<string, string>,\n    onSuccess: (response: string /* JSON string */, certificate: string /* hexadecimal */) => void,\n    onError: (err: any) => void\n)\n")),(0,i.kt)("h3",{id:"post"},"POST"),(0,i.kt)("p",null,"A method that sends an HTTP POST request to a specified resource."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"httpPOST(\n    url: string; // The only supported protocol in the URL is `https://`\n    body: string; // JSON string\n    headers: Record<string, string>,\n    onSuccess: (response: string /* JSON string */, certificate: string /* hexadecimal */) => void,\n    onError: (err: any) => void\n)\n")),(0,i.kt)("h2",{id:"utils"},"Utils"),(0,i.kt)("p",null,"Utility methods."),(0,i.kt)("h3",{id:"generate-random-bytes"},"Generate random bytes"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const entropy: string = generateSecureRandomHex()\n")),(0,i.kt)("h2",{id:"chains"},"Chains"),(0,i.kt)("p",null,"Methods to interact and handle data from various Web3 ecosystems."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'interface _STD_ {\n    chains: {\n        ethereum: {\n            fulfill: (\n                node: string,\n                destination: string, // hexadecimal\n                payload: string, // hexadecimal\n                config: {\n                    methodSignature: string?, // e.g. "fulfill(bytes)"\n                    gasLimit: string, // decimal\n                    maxPriorityFeePerGas: string, // decimal\n                    maxFeePerGas: string, // decimal\n                },\n                onSuccess: (opHash: string) => void,\n                onError: (err: any) => void\n            ) => void\n        };\n        substrate: {\n            codec: {\n                blakeTwo256: (message: string) => string // hexadecimal\n                encodeUnsignedNumber: (number: string | number, bit_length: 8 | 32 | 64 | 128) => string // hexadecimal\n                encodeCompactUnsignedNumber: (number: string | number) => string // hexadecimal\n                encodeBytes: (b: string | Uint8Array) => string // hexadecimal\n                encodeBoolean: (b: boolean) => string // hexadecimal\n                encodeAddress: (address: string) => string // hexadecimal\n                encode: /* generic */\n            };\n            contract: {\n                fulfill: (\n                    nodes: string[],\n                    callIndex: string, // hexadecimal representing the extrinsic to be called\n                    destination: string,\n                    payload: string, // hexadecimal\n                    config: {\n                        callIndex: string,              // hexadecimal\n                        method: string?,                // ink! contract method\n                        value: string?,                 // decimal\n                        refTime: string,                // decimal\n                        proofSize: string,              // decimal\n                        storageDepositLimit: string?,   // decimal\n                    },\n                    onSuccess: (opHash: string) => void,\n                    onError: (err: any) => void\n                ) => void\n            };\n            signer: {\n                setSigner: (curve: "P256" | "SECP256K1") => void;\n            };\n            fulfill: (\n                nodes: string[],\n                payload: string, // hexadecimal\n                config: {\n                    callIndex: string, // hexadecimal\n                },\n                onSuccess: (opHash: string) => void,\n                onError: (err: any) => void\n            ) => void\n        };\n        tezos: {\n            // T: boolean | string | number | T[]\n            encoding: {\n                pack: (value: T | Record<string, T>) => string, // hexadecimal\n                encodeExpr: (value: T | Record<string, T>) => string, // e.g. expr...\n            },\n            // Standard fulfill call. Calls entrypoint with the following signature `(pair int bytes)`\n            fulfill: (\n                nodes: string[],\n                payload: T | Record<string, T>, // hexadecimal\n                config: {\n                    entrypoint: string?,\n                    fee: string, // decimal\n                    gasLimit: string, // decimal\n                    storageLimit: string, // decimal\n                },\n                onSuccess: (opHash: string) => void,\n                onError: (err: any) => void\n            ) => void,\n            // Generic fulfill call\n            customCall: (\n                nodes: string[],\n                payload: T | Record<string, T>, // hexadecimal\n                config: {\n                    entrypoint: string?,\n                    fee: string, // decimal\n                    gasLimit: string, // decimal\n                    storageLimit: string, // decimal\n                },\n                onSuccess: (opHash: string) => void,\n                onError: (err: any) => void\n            ) => void\n        };\n    }\n}\n')),(0,i.kt)("h2",{id:"application-information"},"Application Information"),(0,i.kt)("p",null,"A set of methods and properties to access information about the processor application."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"interface _STD_ {\n    app_info: {\n        version: string;\n    }\n}\n")),(0,i.kt)("h3",{id:"version"},"Version"),(0,i.kt)("p",null,"Access the application version."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"_STD_.app_info.version\n")))}p.isMDXComponent=!0}}]);